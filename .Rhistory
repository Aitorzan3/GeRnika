return(graph)
}
print(get_node_attrs_ws(select_nodes(graph, conditions=(label==tree@genes[i])), node_attr=label))
graph<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(select_nodes(graph, conditions=(label == tree@genes[i])), node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i])
deselect_nodes(graph, select_nodes(graph, conditions=(label == tree@genes[i]))
return(set_attrs(tree,graph,size,circle,i+1))
}
set_attrs<-function (tree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
print(get_node_attrs_ws(select_nodes(graph, conditions=(label==tree@genes[i])), node_attr=label))
graph<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(select_nodes(graph, conditions=(label == tree@genes[i])), node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i])
deselect_nodes(graph, select_nodes(graph, conditions=(label == tree@genes[i])))
return(set_attrs(tree,graph,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
set_attrs<-function (tree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
print(get_node_attrs_ws(select_nodes(graph, conditions=(label==tree@genes[i])), node_attr=label))
graph<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(select_nodes(graph, conditions=(label == tree@genes[i])), node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i])
graph<-deselect_nodes(graph, select_nodes(graph, conditions=(label == tree@genes[i])))
return(set_attrs(tree,graph,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
set_attrs<-function (tree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
print(get_node_attrs_ws(select_nodes(graph, conditions=(label==tree@genes[i])), node_attr=label))
graph<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(select_nodes(graph, conditions=(label == tree@genes[i])), node_attr = fontsize, value = size[i]), node_attr = width, value = 2), node_attr = height, value = circle[i])
graph<-deselect_nodes(graph, select_nodes(graph, conditions=(label == tree@genes[i])))
return(set_attrs(tree,graph,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
set_attrs<-function (tree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
print(get_node_attrs_ws(select_nodes(graph, conditions=(label==tree@genes[i])), node_attr=label))
graph1<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(select_nodes(graph, conditions=(label == tree@genes[i])), node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i])
graph<-deselect_nodes(graph, select_nodes(graph, conditions=(label == tree@genes[i])))
return(set_attrs(tree,graph,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
set_attrs<-function (tree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
print(get_node_attrs_ws(select_nodes(graph, conditions=(label==tree@genes[i])), node_attr=label))
graph1<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(select_nodes(graph, conditions=(label == tree@genes[i])), node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i])
graph<-deselect_nodes(graph, graph1)))
return(set_attrs(tree,graph,size,circle,i+1))
}
set_attrs<-function (tree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
print(get_node_attrs_ws(select_nodes(graph, conditions=(label==tree@genes[i])), node_attr=label))
graph1<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(select_nodes(graph, conditions=(label == tree@genes[i])), node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i])
graph<-deselect_nodes(graph, graph1)
return(set_attrs(tree,graph,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
set_attrs<-function (tree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
print(get_node_attrs_ws(select_nodes(graph, conditions=(label==tree@genes[i])), node_attr=label))
graph1<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(select_nodes(graph, conditions=(label == tree@genes[i])), node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i])
graph<-deselect_nodes(graph1)
return(set_attrs(tree,graph,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
set_attrs<-function (tree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
print(get_node_attrs_ws(select_nodes(graph, conditions=(label==tree@genes[i])), node_attr=label))
graph1<-transform_to_subgraph_ws(set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(select_nodes(graph, conditions=(label == tree@genes[i])), node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i]))
return(set_attrs(tree,graph,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
set_attrs<-function (tree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
print(get_node_attrs_ws(select_nodes(graph, conditions=(label==tree@genes[i])), node_attr=label))
graph<-transform_to_subgraph_ws(set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(select_nodes(graph, conditions=(label == tree@genes[i])), node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i]))
return(set_attrs(tree,graph,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
set_attrs<-function (tree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
print(get_node_attrs_ws(select_nodes(graph, conditions=(label==tree@genes[i])), node_attr=label))
graph<-transform_to_subgraph(set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(select_nodes(graph, conditions=(label == tree@genes[i])), node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i]))
return(set_attrs(tree,graph,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
set_attrs<-function (tree, graph, size, circle,i){
graph<-deselect_nodes(graph, graph)
if(i>length(size)){
return(graph)
}
print(get_node_attrs_ws(select_nodes(graph, conditions=(label==tree@genes[i])), node_attr=label))
graph<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(select_nodes(graph, conditions=(label == tree@genes[i])), node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i])
return(set_attrs(tree,graph,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
size
sizes
set_attrs<-function(phylotree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
print(get_node_attrs_ws(select_nodes(graph, conditions=(label==phylotree@genes[i])), node_attr=label))
graph1<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(select_nodes(graph, conditions=(label==phylotree@genes[i])), node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i])
return(set_attrs(phylotree,graph1,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
set_attrs<-function(phylotree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
nodes<-select_nodes(graph, conditions=(label==phylotree@genes[i]))
graph1<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(nodes, node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i])
return(set_attrs(phylotree,graph1,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
set_attrs<-function(phylotree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
nodes<-select_nodes(graph, conditions=(label==phylotree@genes[i]))
graph<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(nodes, node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i])
return(set_attrs(phylotree,graph,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
set_attrs<-function(phylotree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
nodes<-select_nodes(graph, conditions=(label==phylotree@genes[i]))
graph<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(get_selection(nodes), node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i])
return(set_attrs(phylotree,graph,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
set_attrs<-function(phylotree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
graph<-select_nodes(graph, conditions=(label==phylotree@genes[i]))
graph<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(graph, node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i])
return(set_attrs(phylotree,graph,size,circle,i+1))
}
render_graph(set_attrs(a, graph, sizes, circles, 1))
set_attrs<-function(phylotree, graph, size, circle,i){
if(i>length(size)){
return(graph)
}
graph<-select_nodes(graph, conditions=(label==phylotree@genes[i]))
print(get_selection(graph))
graph<-set_node_attrs_ws(set_node_attrs_ws(set_node_attrs_ws(graph, node_attr = fontsize, value = size[i]), node_attr = width, value = circle[i]), node_attr = height, value = circle[i])
return(set_attrs(phylotree,graph,size,circle,i+1))
}
render_graph(graph)
render_graph(set_attrs(a, graph, sizes, circles, 1))
get_node_ids(select_nodes(graph, conditions=(label==1)))
get_node_ids(select_nodes(graph, conditions=(label==1)))
get_node_ids(select_nodes(graph, conditions=(label==1)))
get_node_ids(select_nodes(graph, conditions=(label==2)))
select_nodes(graph, conditions=(label==2))
render(select_nodes(graph, conditions=(label==2)))
render_graph(select_nodes(graph, conditions=(label==2)))
get_node_attribute(select_nodes(graph), node_attr=label)
get_node_attrs_ws(select_nodes(graph), node_attr=label)
get_clones(ids)
ids<-get_node_attrs_ws(select_nodes(graph), node_attr=label)
get_clones(ids)
print(get_clones(ids))
print(ids)
print(ids)
ordered<-map(1:length(order), function(x) return(proportions[order[i]]))
ordered<-map(1:length(order), function(x) return(proportions[order[x]]))
ordered<-map(1:length(order), proportions[order[x]])
ordered<-map(1:length(order), function(x) proportions[order[x]])
order<-get_clones(ids)
ordered<-map(1:length(order), function(x) proportions[order[x]])
ordered
ordered<-unlist(map(1:length(order), function(x) proportions[order[x]]))
ordered
circles<-unlist(map(ordered, function(x) return(x*4+0.5)))
sizes<-unlist(map(ordered, function(x) return(x*190+10)))
render_graph(set_node_attrs(set_node_attrs(set_node_attrs(graph, node_attr = fontsize, values = unlist(sizes)), node_attr = width, values = unlist(circles)), node_attr = height, values = unlist(circles)))
proportions
instance$U
proportions
a@clones[6]
a@clones[7]
a@clones[8]
a@clones[9]
a@clones[22]
order<-get_clones(ids)
order
proportions
ordered
ids
order<-get_node_attrs_ws(select_nodes(graph), node_attr=label)
ordered<-unlist(map(1:length(order), function(x) proportions[order[x]]))
ordered
order<-get_node_attrs_ws(select_nodes(graph), node_attr=label)
order
ordered<-unlist(map(1:length(order), function(x) proportions[order[x]]))
ordered
order<-get_node_attrs_ws(select_nodes(graph), node_attr=label)
order
order<-get_node_attrs_ws(select_nodes(graph), node_attr=label)
ordered<-unlist(map(1:length(order), function(x) proportions[order[x]]))
ordered
map(1:length(order), function(x) proportions[order[x]])
proportions[order[1]]
proportions
proportions[1]
order[1]
class(order)
as.numeric(order)
order<-as.numeric(get_node_attrs_ws(select_nodes(graph), node_attr=label))
map(1:length(order), function(x) proportions[order[x]])
unlist(map(1:length(order), function(x) proportions[order[x]]))
circles<-unlist(map(ordered, function(x) return(x*4+0.5)))
sizes<-unlist(map(ordered, function(x) return(x*190+10)))
render_graph(set_node_attrs(set_node_attrs(set_node_attrs(graph, node_attr = fontsize, values = unlist(sizes)), node_attr = width, values = unlist(circles)), node_attr = height, values = unlist(circles)))
order<-as.numeric(get_node_attrs_ws(select_nodes(graph), node_attr=label))
ordered<-unlist(map(1:length(order), function(x) proportions[order[x]]))
circles<-unlist(map(ordered, function(x) return(x*4+0.5)))
sizes<-unlist(map(ordered, function(x) return(x*190+10)))
render_graph(set_node_attrs(set_node_attrs(set_node_attrs(graph, node_attr = fontsize, values = unlist(sizes)), node_attr = width, values = unlist(circles)), node_attr = height, values = unlist(circles)))
proportions[1]
proportions
order<-as.numeric(get_node_attrs_ws(select_nodes(graph), node_attr=label))
ordered<-unlist(map(1:length(order), function(x) proportions[order[x]]))
proportions
circles<-unlist(map(ordered, function(x) return(x*4+0.5)))
sizes<-unlist(map(ordered, function(x) return(x*170+10)))
proportions
render_graph(set_node_attrs(set_node_attrs(set_node_attrs(graph, node_attr = fontsize, values = unlist(sizes)), node_attr = width, values = unlist(circles)), node_attr = height, values = unlist(circles)))
B
instance$B
proportions
order
tree<-a
proportions_genes<-unlist(map(1:length(proportions), function(x) proportions[clone_to_gene(tree,x)]))
ordered<-unlist(map(1:length(order), function(x) proportions_genes[order[x]]))
circles<-unlist(map(ordered, function(x) return(x*4+0.5)))
sizes<-unlist(map(ordered, function(x) return(x*170+10)))
render_graph(set_node_attrs(set_node_attrs(set_node_attrs(graph, node_attr = fontsize, values = unlist(sizes)), node_attr = width, values = unlist(circles)), node_attr = height, values = unlist(circles)))
proportions_genes
circles<-unlist(map(ordered, function(x) return(x*3+0.5)))
sizes<-unlist(map(ordered, function(x) return(x*170+10)))
render_graph(set_node_attrs(set_node_attrs(set_node_attrs(graph, node_attr = fontsize, values = unlist(sizes)), node_attr = width, values = unlist(circles)), node_attr = height, values = unlist(circles)))
circles<-unlist(map(ordered, function(x) return(x*3+0.5)))
sizes<-unlist(map(ordered, function(x) return(x*140+10)))
render_graph(set_node_attrs(set_node_attrs(set_node_attrs(graph, node_attr = fontsize, values = unlist(sizes)), node_attr = width, values = unlist(circles)), node_attr = height, values = unlist(circles)))
plot_proportions<-function(phylotree, proportions){
if(length(clones) != length(proportions)){
stop("\n the proportion vectors length must be equal to the number of clones in the tree")
}
graph<-Clone(phylotree@tree)
circles<-unlist(map(ordered, function(x) return(x*3+0.5)))
sizes<-unlist(map(ordered, function(x) return(x*140+10)))
order<-as.numeric(get_node_attrs_ws(select_nodes(graph), node_attr=label))
proportions_genes<-unlist(map(1:length(proportions), function(x) proportions[clone_to_gene(tree,x)]))
ordered<-unlist(map(1:length(order), function(x) proportions_genes[order[x]]))
graph<-set_node_attrs(set_node_attrs(set_node_attrs(graph, node_attr = fontsize, values = unlist(sizes)), node_attr = width, values = unlist(circles)), node_attr = height, values = unlist(circles)))
return(graph)
}
plot_proportions<-function(phylotree, proportions){
if(length(clones) != length(proportions)){
stop("\n the proportion vectors length must be equal to the number of clones in the tree")
}
graph<-Clone(phylotree@tree)
circles<-unlist(map(ordered, function(x) return(x*3+0.5)))
sizes<-unlist(map(ordered, function(x) return(x*140+10)))
order<-as.numeric(get_node_attrs_ws(select_nodes(graph), node_attr=label))
proportions_genes<-unlist(map(1:length(proportions), function(x) proportions[clone_to_gene(tree,x)]))
ordered<-unlist(map(1:length(order), function(x) proportions_genes[order[x]]))
graph<-set_node_attrs(set_node_attrs(set_node_attrs(graph, node_attr = fontsize, values = unlist(sizes)), node_attr = width, values = unlist(circles)), node_attr = height, values = unlist(circles))
return(graph)
}
plot_proportions(a, proportions)
plot_proportions<-function(phylotree, proportions){
if(length(phylotree@clones) != length(proportions)){
stop("\n the proportion vectors length must be equal to the number of clones in the tree")
}
graph<-Clone(phylotree@tree)
circles<-unlist(map(ordered, function(x) return(x*3+0.5)))
sizes<-unlist(map(ordered, function(x) return(x*140+10)))
order<-as.numeric(get_node_attrs_ws(select_nodes(graph), node_attr=label))
proportions_genes<-unlist(map(1:length(proportions), function(x) proportions[clone_to_gene(tree,x)]))
ordered<-unlist(map(1:length(order), function(x) proportions_genes[order[x]]))
graph<-set_node_attrs(set_node_attrs(set_node_attrs(graph, node_attr = fontsize, values = unlist(sizes)), node_attr = width, values = unlist(circles)), node_attr = height, values = unlist(circles))
return(graph)
}
plot_proportions(a, proportions)
plot_proportions<-function(phylotree, proportions){
if(length(phylotree@clones) != length(proportions)){
stop("\n the proportion vectors length must be equal to the number of clones in the tree")
}
graph<-ToDiagrammeRGraph(Clone(phylotree@tree))
circles<-unlist(map(ordered, function(x) return(x*3+0.5)))
sizes<-unlist(map(ordered, function(x) return(x*140+10)))
order<-as.numeric(get_node_attrs_ws(select_nodes(graph), node_attr=label))
proportions_genes<-unlist(map(1:length(proportions), function(x) proportions[clone_to_gene(tree,x)]))
ordered<-unlist(map(1:length(order), function(x) proportions_genes[order[x]]))
graph<-set_node_attrs(set_node_attrs(set_node_attrs(graph, node_attr = fontsize, values = unlist(sizes)), node_attr = width, values = unlist(circles)), node_attr = height, values = unlist(circles))
return(graph)
}
render_graph(plot_proportions(a, proportions))
prop1<-plot_proportions(a, proportions)
instance<-create_instance(25,2,0.5,"neutral")
proportions<-instance$U
proportions<-proportions[1,]
prop2<-plot_proportions(a,proportions)
render_graph(prop2)
render_graph(prop1)
render_graph(prop2)
instance<-create_instance(25,4,0.5,"neutral")
proportions<-proportions[1,]
proportions<-instance$U
proportions<-proportions[1,]
prop1<-plot_proportions(a, proportions)
proportions<-proportions[2,]
proportions<-proportions[3,]
proportions
proportions<-instance$U[2,]
prop2<-plot_proportions(a,proportions)
render_graph(prop1)
render_graph(prop2)
instance$B
render_graph(prop1)
render_graph(prop2)
proportions1<-instance$U[2,]
proportions1
proportions2<-instance$U[3,]
proportions2
prop1<-plot_proportions(a, proportions1)
prop2<-plot_proportions(a,proportions2)
render_graph(prop2)
render_graph(prop2)
render_graph(prop1)
plot_proportions<-function(phylotree, proportions){
if(length(phylotree@clones) != length(proportions)){
stop("\n the proportion vectors length must be equal to the number of clones in the tree")
}
graph<-ToDiagrammeRGraph(Clone(phylotree@tree))
circles<-unlist(map(ordered, function(x) return(x*3+0.5)))
sizes<-unlist(map(ordered, function(x) return(x*140+10)))
order<-as.numeric(get_node_attrs_ws(select_nodes(graph), node_attr=label))
proportions_genes<-unlist(map(1:length(proportions), function(x) proportions[clone_to_gene(tree,x)]))
ordered<-unlist(map(1:length(order), function(x) proportions_genes[order[x]]))
graph<-set_node_attrs(set_node_attrs(set_node_attrs(graph, node_attr = fontsize, values = unlist(sizes)), node_attr = width, values = unlist(circles)), node_attr = height, values = unlist(circles))
return(graph)
}
proportions1<-instance$U[2,]
proportions1
proportions2<-instance$U[3,]
proportions2
prop1<-plot_proportions(a, proportions1)
prop2<-plot_proportions(a,proportions2)
render_graph(prop2)
render_graph(prop1)
plot_proportions<-function(phylotree, proportions){
if(length(phylotree@clones) != length(proportions)){
stop("\n the proportion vectors length must be equal to the number of clones in the tree")
}
graph<-ToDiagrammeRGraph(Clone(phylotree@tree))
order<-as.numeric(get_node_attrs_ws(select_nodes(graph), node_attr=label))
proportions_genes<-unlist(map(1:length(proportions), function(x) proportions[clone_to_gene(phylotree,x)]))
ordered<-unlist(map(1:length(order), function(x) proportions_genes[order[x]]))
circles<-unlist(map(ordered, function(x) return(x*3+0.5)))
sizes<-unlist(map(ordered, function(x) return(x*140+10)))
graph<-set_node_attrs(set_node_attrs(set_node_attrs(graph, node_attr = fontsize, values = unlist(sizes)), node_attr = width, values = unlist(circles)), node_attr = height, values = unlist(circles))
return(graph)
}
prop1<-plot_proportions(a, proportions1)
render_graph(prop1)
prop2<-plot_proportions(a,proportions2)
render_graph(prop2)
render_graph(combine_graphs(prop1,prop2))
render_graph(combine_graphs(prop1,prop2))
combine_graphs(prop1,prop2)
render_graph(combine_graphs(prop1,prop2))
proportions2
gene_to_clone(a,10)
clone_to_gene(a,11)
proportions1
gene_to_clone(a,8)
gene_to_clone(a,22)
clone_to_gene(a,16)
proportions1
clone_to_gene(a,7)
clone_to_gene(a,4)
clone_to_gene(a,5)
clone_to_gene(a,16)
proportions2
clone_to_gene(a,2)
clone_to_gene(a,3)
a@genes
map(1:length(proportions1), function(x) proportions1[clone_to_gene(a,x)])
unlist(map(1:length(proportions1), function(x) proportions1[clone_to_gene(a,x)]))
a@genes
unlist(map(1:length(proportions2), function(x) proportions2[clone_to_gene(a,x)]))
proportions2
clone_to_gene(a,11)
unlist(map(1:length(proportions2), function(x) proportions2[gene_to_clone(a,x)]))
clone_to_gene(a,10)
gene_to_clone(a,25)
clone_to_gene(a,25)
a@b[9,]
a@B[9,]
a@B[25,]
plot_proportions<-function(phylotree, proportions){
if(length(phylotree@clones) != length(proportions)){
stop("\n the proportion vectors length must be equal to the number of clones in the tree")
}
graph<-ToDiagrammeRGraph(Clone(phylotree@tree))
order<-as.numeric(get_node_attrs_ws(select_nodes(graph), node_attr=label))
proportions_genes<-unlist(map(1:length(proportions), function(x) proportions[gene_to_clone(phylotree,x)]))
ordered<-unlist(map(1:length(order), function(x) proportions_genes[order[x]]))
circles<-unlist(map(ordered, function(x) return(x*3+0.5)))
sizes<-unlist(map(ordered, function(x) return(x*140+10)))
graph<-set_node_attrs(set_node_attrs(set_node_attrs(graph, node_attr = fontsize, values = unlist(sizes)), node_attr = width, values = unlist(circles)), node_attr = height, values = unlist(circles))
return(graph)
}
proportions1<-instance$U[2,]
proportions1
prop1<-plot_proportions(a, proportions1)
render_graph(prop1)
prop2<-plot_proportions(a,proportions2)
render_graph(prop2)
clone_to_gene(a,11)
proportions2
clone_to_gene(a,20)
clone_to_gene(a,18)
remove.packages("GeRnika", lib="~/R/win-library/4.1")
devtools::install_github("Aitorzan3/GeRnika", build_vignettes = TRUE)
library(GeRnika)
devtools::install_github("Aitorzan3/GeRnika", build_vignettes = TRUE)
remove.packages("GeRnika", lib="~/R/win-library/4.1")
devtools::install_github("Aitorzan3/GeRnika", build_vignettes = TRUE)
devtools::install_github("Aitorzan3/GeRnika")
remotes::install_github("Aitorzan3/GeRnika")
library(GeRnika)
remotes::install_github("Aitorzan3/GeRnika")
remotes::install_github("Aitorzan3/GeRnika")
install.packages("installr")
library(installr)
updateR()
devtools::install_github("Aitorzan3/GeRnika")
install.packages("devtools")
ls
ls
devtools::install_github("Aitorzan3/GeRnika")
devtools::install_github("Aitorzan3/GeRnika")
remove.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
devtools::install_github("Aitorzan3/GeRnika")
install.packages("vctrs")
install.packages("vctrs")
devtools::install_github("Aitorzan3/GeRnika")
library(GeRnika)
data<-create_instance(5,2,0.5,"neutral", seed=1)
tree<-B_to_phylotree(data$B)
find_common_subtrees(tree,tree)
combine_trees(tree,tree)
render_graph(combine_trees(tree,tree))
data<-create_instance(5,1,0.5,"neutral", seed=1)
data<-create_instance(5,2,0.5,"neutral", seed=1)
browse_vignette("GeRnika")
devtools::build_vignettes("GeRnika")
devtools::build_vignettes(GeRnika)
library(GeRnika)
devtools::build_vignettes(GeRnika)
devtools::install_github("Aitorzan3/GeRnika", build_vignettes=TRUE)
remove.packages("GeRnika")
devtools::install_github("Aitorzan3/GeRnika", build_vignettes=TRUE)
library(GeRnika)
create_instance()
show_vignettes("GeRnika")
.libPaths("GeRnika")
.libPaths()
library(GeRnikaç)
library(GeRnika)
devtools::install_github("Aitorzan3/GeRnika", build_vignettes=TRUE)
devtools::install_github("Aitorzan3/GeRnika", build_vignettes=TRUE)
library(devtools)
devtools::install_github("Aitorzan3/GeRnika", build_vignettes=TRUE)
install.packages("devtools")
install.packages("devtools")
devtools::install_github("Aitorzan3/GeRnika", build_vignettes=TRUE)
install.packages("devtools")
library(GeRnika)
sessionInfo()
.libPaths()
ls
setwd("~/Doctorado/GeRnika/definitivo/GeRnika")
View(graph)
